{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","numberOfCounters","className","href","Counter","style","fontSize","fontWeight","console","log","this","props","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDecrement","onDelete","id","classes","value","Component","Counters","onReset","counters","onAdd","onDeleteAll","map","key","App","state","handleIncrement","index","indexOf","setState","handleDecrement","handleReset","resetCounters","handleDelete","counterId","newCounters","filter","handleAdd","newCounter","length","push","handleDeleteAll","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.33e7dfcb.chunk.js","sourcesContent":["import React from \"react\";\n\n// note: using {} in the parameters makes it so one does not need to do\n// something like props.totalCounters instead it will go right to totalCounters.\n// The other way to do this is function NavBar(props){...} but then you need to\n// do props.totalCounters in the span header.\nfunction NavBar({ totalCounters, numberOfCounters }) {\n  return (\n    //   the nav bar\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"top\">\n        Navbar {/* Shows the total number counters that are not zero */}\n        <span className=\"badge badge-pill badge-secondary\">\n          {totalCounters}\n        </span>\n        {/*  Shows the user a message if there are not counters in the array */}\n        <span className=\"m-2\">\n          {numberOfCounters <= 0 &&\n            \"Click the Add Counter button to get started\"}\n        </span>\n      </a>\n    </nav>\n  );\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\n// A classes that renders a button and a \"label\" to display a count.\n// This class has a increment, decrement, delete button.\n\nclass Counter extends Component {\n  // This is what is rendered from this class.\n  render() {\n    console.log(\"props: \", this.props);\n\n    return (\n      <div>\n        {/* \n        This would render any children components. \n        {this.props.children} \n        */}\n        <span className={this.getBadgeClasses()}>\n          <h5>{this.formatCount()}</h5>\n        </span>\n\n        {/* This is the increment button */}\n        <button\n          // onClick needs to be passed a function reference.\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-secondary btn-md\"\n        >\n          Increment\n        </button>\n\n        {/* This is the decrement button */}\n        <button\n          onClick={() => this.props.onDecrement(this.props.counter)}\n          className=\"btn btn-warning btn-md m-2\"\n        >\n          Decrement\n        </button>\n\n        {/* This is the delete button */}\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n          className=\"btn btn-danger btn-md m-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  // ---------------------------------------------------------------------------\n  // ---------------------------------------------------------------------------\n  // ---------------------------------------------------------------------------\n\n  // This function checks to see if the count is equal to zero.\n  // if so then the string warning (yellow color) is appended to the classes\n  // variable else the string primary (blue color) is attached to the end of\n  // the string classes.\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  // ---------------------------------------------------------------------------\n  // ---------------------------------------------------------------------------\n  // ---------------------------------------------------------------------------\n\n  // This method checks the count variable and returns Zero as a string\n  // if the count is equal to 0 else the method returns the number the\n  // count variable.\n  formatCount() {\n    // This grabs the value prop from the state of the counter class.\n    // I believe this is the same as below:\n    // const value = this.props.counter.value;\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  }\n\n  // ---------------------------------------------------------------------------\n  // ---------------------------------------------------------------------------\n  // ---------------------------------------------------------------------------\n\n  // A style that will set a html/cs style to be of font size of 20 and\n  // fontWeight to bold.\n  style = {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  };\n}\n\nexport default Counter;\n\n// ---------------------------------------------------------------------------\n// ---------------------------------------------------------------------------\n// ---------------------------------------------------------------------------\n\n// Tags are no longer used.\n// renderTags() {\n//   var returnVar;\n//   if (this.state.tags.length === 0) {\n//     returnVar = <p>There are no tags!</p>;\n//   } else {\n//     /*</ul> This gets the tags array from the state object from above.\n//         Then places each index or element in the array into the <li> of\n//         the HTML style language. The wants to be unique in this case the\n//         tag is unique and we used this.\n//     */\n//     returnVar = (\n//       <ul>\n//         {this.state.tags.map(tag => (\n//           <li key={tag}>{tag}</li>\n//         ))}\n//       </ul>\n//     );\n//   }\n\n//   return returnVar;\n// }\n\n// ---------------------------------------------------------------------------\n// ---------------------------------------------------------------------------\n// ---------------------------------------------------------------------------\n\n// we ended up using arrow function to bind the this component.\n// constructor() {\n//   super();\n//   // This bit of code gives the ability to use this to the handel method.\n//   // handle methods need to be binned to the this object.\n//   this.handleIncrement = this.handleIncrement.bind(this);\n// }\n\n// ---------------------------------------------------------------------------\n// ---------------------------------------------------------------------------\n// ---------------------------------------------------------------------------\n\n// Note: the method was replaced with an inline function.\n// This is so we can pass arguments\n// doHandleIncrement = () => {\n//   this.handleIncrement({ id: 1 });\n// };\n\n/// Notes:\n\n/* Shows a button and how to change the color of the button base on a \n     condition\n     <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n     <button className=\"btn btn-secondary btn-sm\">Increment</button> */\n\n// Note: It is possible to create objects for styles as well. ie:\n// <span style={{ fontSize: 30 }} className=\"badge badge-primary m-2\"></div>\n// This is an object style:\n// <span style={this.style} className=\"badge badge-primary m-2\">\n// className holds some bootstrap elements for style.\n\n// imageUrl: \"https://picsum.photos/200\", // this get a random image.\n\n// Something else to note:\n/* address: {\n    street: ''\n    zip: ''\n   } */\n\n/* When there is a string (or a number) in a bool expression and if all\n   expression in the statement is true the expression will return the value\n   found at the every end of the expression (far right expression) }\n   {this.state.tags.length === 0 && \"Please create a new tag!\"} */\n\n// state = {\n//   value: this.props.counter.value\n// };\n\n// The arrow function get the handle function the this component. This is done\n// by when a function uses the arrow => it inherited the \"this\" component from\n// the class. Normal method looks like handleIncrement() { ... } and the bind\n// will happen in the constructor.\n// handleIncrement = product => {\n//   // console.log(\"Increment Clicked\", this.state.count);\n//   console.log(product);\n\n//   // The set states is doing \"this.state.value++;\" but then updating the web\n//   // page\n//   this.setState({ value: this.state.value + 1 });\n// };\n\n// ---------------------------------------------------------------------------\n// ---------------------------------------------------------------------------\n// ---------------------------------------------------------------------------\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\n// A counter that has a three buttons (reset, delete all, add counter) and\n// a list of counters based on the array in the app class.\nclass Counters extends Component {\n  render() {\n    // We can use object destructuring to get rid of the this.props. in front of\n    // onRest, onDelete, and onIncrement in the return code.\n    const {\n      onReset,\n      counters,\n      onDelete,\n      onIncrement,\n      onDecrement,\n      onAdd,\n      onDeleteAll\n    } = this.props;\n\n    return (\n      <div>\n        {/* Adds the Reset button */}\n        <button onClick={onReset} className=\"btn btn-primary btn-md m-2\">\n          Reset\n        </button>\n\n        {/* Adds the Delete all button */}\n        <button onClick={onDeleteAll} className=\"btn btn-danger btn-md m-2\">\n          Delete All\n        </button>\n\n        {/* adds a list of counters */}\n        {counters.map(counter => (\n          <Counter\n            key={counter.id}\n            counter={counter}\n            onDelete={onDelete}\n            onIncrement={onIncrement}\n            onDecrement={onDecrement}\n          >\n            {/*\n             This can be done to pass as a children component\n             <h4>Counter #{counter.id}</h4> \n             */}\n          </Counter>\n        ))}\n\n        {/* Adds the add counter button */}\n        <button onClick={onAdd} className=\"btn btn-primary btn-md m-2\">\n          Add Counter\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n//      The top level component\n//              App\n//             /   \\\n//            /     \\\n//        NavBar   Counters\n//                     \\\n//                   Counter\nclass App extends Component {\n  state = {\n    counters: []\n  };\n\n  /// --------------------------------------------------------------------------\n  /// --------------------------------------------------------------------------\n  /// --------------------------------------------------------------------------\n\n  // This method will increment the given counter.\n  // param counter: The counter object to increment.\n  handleIncrement = counter => {\n    //console.log(counter);\n\n    /// The ... creates a copy of the this.state.counters array.\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    // Recalls the render method.\n    this.setState({ counters });\n    //console.log(this.state.counters[index]);\n  };\n\n  /// --------------------------------------------------------------------------\n  /// --------------------------------------------------------------------------\n  /// --------------------------------------------------------------------------\n\n  // This method will decrement the given counter.\n  // param counter: The counter object to decrement.\n  // Note: will not let the counter go below 0 (zero)\n  handleDecrement = counter => {\n    if (counter.value > 0) {\n      const counters = [...this.state.counters];\n      const index = counters.indexOf(counter);\n      counters[index] = { ...counter };\n      counters[index].value--;\n      this.setState({ counters });\n    }\n  };\n\n  /// --------------------------------------------------------------------------\n  /// --------------------------------------------------------------------------\n  /// --------------------------------------------------------------------------\n\n  // When this method is called it will reset the value of all counters that are\n  // created at the given time of the method call.\n  handleReset = () => {\n    const resetCounters = this.state.counters.map(counter => {\n      counter.value = 0;\n      return counter;\n    });\n\n    this.setState({ counters: resetCounters });\n  };\n\n  /// --------------------------------------------------------------------------\n  /// --------------------------------------------------------------------------\n  /// --------------------------------------------------------------------------\n\n  // When this method is called the counter with the given id will be deleted\n  // from array.\n  // param counterId: The id of the counter to be deleted.\n  handleDelete = counterId => {\n    // console.log(\"Event Handler Called\", counterId);\n\n    const newCounters = this.state.counters.filter(\n      counter => counter.id !== counterId\n    );\n\n    this.setState({ counters: newCounters });\n  };\n\n  /// --------------------------------------------------------------------------\n  /// --------------------------------------------------------------------------\n  /// --------------------------------------------------------------------------\n\n  // This method when called will add a new counters to the array.\n  handleAdd = () => {\n    const newCounters = [...this.state.counters];\n    const newCounter = { id: newCounters.length + 1, value: 0 };\n    newCounters.push(newCounter);\n\n    this.setState({ counters: newCounters });\n  };\n\n  /// --------------------------------------------------------------------------\n  /// --------------------------------------------------------------------------\n  /// --------------------------------------------------------------------------\n\n  // When this method is called this will delete the array of counters.\n  handleDeleteAll = () => {\n    const newCounters = [];\n    this.setState({ counters: newCounters });\n  };\n\n  /// --------------------------------------------------------------------------\n  /// --------------------------------------------------------------------------\n  /// --------------------------------------------------------------------------\n\n  // The objects to be shown to the user.\n  render() {\n    return (\n      <React.Fragment>\n        {/* The nav bar */}\n        <NavBar\n          totalCounters={\n            this.state.counters.filter(counter => counter.value > 0).length\n          }\n          numberOfCounters={this.state.counters.length}\n        />\n\n        {/* The main container that show everything thats not the nav bar */}\n        <main className=\"container float-left\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            onAdd={this.handleAdd}\n            onDecrement={this.handleDecrement}\n            onDeleteAll={this.handleDeleteAll}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}